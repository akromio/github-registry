spec: v1.0
desc: Catalog for working with GitHub Pages.

dataset:
  - const: src
    desc: Dir where the source templates are.
    value: $(__dir)/_$(__catalogName)
    tags: [hidden]
  
  - const: dst
    desc: Local directory where to save the files.
    value: $(workDir)
  
  - const: websiteDir
    desc: Common question for getting the site dir.
    tags: [hidden]
    value:
      select: websiteDir
      options: [/, /docs]
      defaultValue: /
  
  - const: theme
    desc: Common question for getting the theme.
    tags: [hidden]
    value:
      select: theme
      options: [jekyll/minima, pages-theme/leap-day]
      defaultValue: jekyll/minima
  
  - const: plugins
    desc: Common question for getting the plugins.
    tags: [hidden]
    value:
      select: plugins
      multiple: true
      options: [jekyll-feed, jekyll-sitemap]
      defaultValue: [jekyll-sitemap]
  
  - const: websiteQ
    desc: Questions for the creation of a Jekyll website.
    tags: [hidden, questions]
    value:
      - $(websiteDir)
      - input: websiteTitle
      - input: websiteDesc
      - input: websiteUrl
      - input: websiteBase
        defaultValue: /
      - $(theme)
      - $(plugins)
      - confirm: gemfile
        defaultValue: true
  
  - const: configQ
    desc: Questions for the creation of _config.yaml
    tags: [hidden, questions]
    value:
      - $(websiteDir)
      - input: websiteTitle
      - input: websiteDesc
      - input: websiteUrl
      - input: websiteBase
        defaultValue: /
      - $(theme)
      - $(plugins)
      - confirm: gemfile
        defaultValue: true
  
  - const: gemfileQ
    desc: Questions for the creation of Gemfile
    tags: [hidden, questions]
    value:
      - $(websiteDir)
      - $(plugins)
  
  - const: dataQ
    desc: Questions for the creation of a data file.
    tags: [hidden, questions]
    value:
      - $(websiteDir)
      - input: fileName
        title: File name (w/o extension)
  
  - const: frontMatterQ
    desc: Questions for building a front matter.
    tags: [hidden, questions]
    value:
      - input: title
      - input: layout
        defaultValue: default
      - input: permalink
  
  - const: pageQ
    desc: Questions for building a content page.
    tags: [hidden, questions]
    value:
      - $(websiteDir)
      - input: pageDir
      - input: fileName
      - input: title
      - input: layout
        defaultValue: page
      - input: permalink

  - const: workflowQ
    desc: Questions for generating a GitHub workflow
    tags: [hidden, questions]
    value:
      - input: workflowName

  - const: dockerQ
    desc: Questions for returning a command line for running Jekyll w/ Docker.
    tags: [hidden, questions]
    value:
      - input: container
        defaultValue: jekyll
      - select: image
        options: [jekyll/jekyll:pages, jekyll/jekyll:latest]
        defaultValue: jekyll/jekyll:pages

defaultJobName: website
jobs:
  - macro: website
    title: Create the scaffold for a Jekyll website
    ini:
      - quiet: $answers = inquire $(websiteQ) $(answers)
    dataset: [item, content]
    steps:
      - fs.createDir $(dst)/$(answers.websiteDir)
      - fs.createDir $(dst)/$(answers.websiteDir)/_data
      - fs.createDir $(dst)/$(answers.websiteDir)/_includes
      - cr.copy $(src)/_gitignore $(dst)/$(answers.websiteDir)/.gitignore
      - config
      - if: answers.gemfile
        step: gemfile
  
  - macro: config
    title: Create the _config.yaml file
    ini:
      - quiet: $answers = inquire $(configQ) $(answers)
    dataset: [item, content]
    steps:
      - quiet: $item = cr.getItem $(src)/_config.yaml.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - fs.createDir $(dst)/$(answers.websiteDir)
      - file.write $(content) $(dst)/$(answers.websiteDir)/_config.yaml

      - if: answers.gemfile
        quiet: $item = cr.getItem $(src)/Gemfile.hbs
      - if: answers.gemfile
        quiet: $content = hbs.render $(item.value) $(answers)
      - if: answers.gemfile
        step: file.write $(content) $(dst)/$(answers.websiteDir)/Gemfile
  
  - macro: gemfile
    title: Create the Gemfile file
    ini:
      - quiet: $answers = inquire $(gemfileQ) $(answers)
    dataset: [item, content]
    steps:
      - fs.createDir $(dst)/$(answers.websiteDir)

      - quiet: $item = cr.getItem $(src)/Gemfile.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)$(answers.websiteDir)/Gemfile

  - macro: data
    title: Create a data file
    ini:
      - quiet: $answers = inquire $(dataQ) $(answers)
    dataset: [item, content]
    steps:
      - fs.createDir $(dst)/$(answers.websiteDir)/_data

      - quiet: $item = cr.getItem $(src)/_data/file.yaml.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)/$(answers.websiteDir)/_data/$(answers.fileName).yaml
  
  - macro: front-matter
    title: Build a page front matter
    ini:
      - quiet: $answers = inquire $(frontMatterQ) $(answers)
    dataset: [item, content]
    steps:
      - quiet: $item = cr.getItem $(src)/frontMatter.hbs
      - log: hbs.render $(item.value) $(answers)

  - macro: page
    title: Create a content page
    ini:
      - quiet: $answers = inquire $(pageQ) $(answers)
    dataset: [item, content]
    steps:
      - fs.createDir $(dst)/$(answers.websiteDir)/$(answers.pageDir)

      - quiet: $item = cr.getItem $(src)/page.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)/$(answers.websiteDir)/$(answers.pageDir)/$(answers.fileName)

  - macro: workflow
    title: Create a GitHub Actions workflow for publishing website on GitHub Pages
    ini:
      - quiet: $answers = inquire $(workflowQ) $(answers)
    dataset: [item, content]
    steps:
      - fs.createDir $(dst)/.github/workflows

      - quiet: $item = cr.getItem $(src)/workflows/workflow.yaml.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)/.github/workflows/github-pages.yaml

  - macro: docker
    title: Return a command line for running Jekyll with Docker
    ini:
      - quiet: $answers = inquire $(dockerQ) $(answers)
    steps:
      - log sudo docker --name $(answers.container) -v $PWD:/srv/jekyll -p 4000:4000 -it --rm $(answers.image) bash -c 'bundle update && bundle exec jekyll clean && bundle exec jekyll s --host 0.0.0.0 --verbose'
